package.json: npm init -y

To install express: npm i express

To run script.js(js file): node -script.js-file-name
Express:
--------
-> To create routes, servers(3000)
eg: app.get()    -> routes
    app.listen() -> server

->To run routes on automate:
 
 npm i nodemon -g
 run: nodemon -script.js-file-name/
    npx nodemon -script.js-file-name

Middle-ware:
------------
-> app.get(function()):
e.g:
    app.use(function (req, res, next) {
        console.log("middle ware shuru hua");
        next();
    });
    middle ware starts , then to routes


-> next(): to allow routes functioning
-> Remarks: try to get other method to acess middle ware

Error handling from express js website:
------------------------------------
Error in website
----------------

app.use((err, req, res, next) => {
    console.error(err.stack)
    res.status(500).send('Something in middle ware!')
  })

Console-error handling:
----------------------
app.get('/about',function(req,res,next){
    return next(new Error('something went wrong'))
})

Form handling:
--------------
run: npm i cookie-parser

brief-idea:

    data present in frontend page is presented on browser, 
    if there is any request from backend, that data automatically is transfered to backend

->session: the process of routing and etc that carry cooking all the way(login, logout)
->cookie: the data that is stored in frontend page
->blob: mixed data from front-end to back-end(or server) couldn't be readible
    
//blob for backend
app.use(express.json())
app.use(express.urlencoded({extended:true}))

storage:
-------
problem-fix: 
------------
->create 'data' folder in 'c' drive
    ->create 'db' folder in 'data' folder
    ->cmd->'mongod' and keep it running through entire work


TYPES OF DBS = SQL | NoSQL
-----------

SQL   - data stored in form of tables(My SQL)
NoSQL - data stored in form of objects(Mongo DB)

------------------------------------------------------------------------------------
npm init -y

npm i express

npm i mongoose

create app.js
---------------
    -> app.get()
    -> app.listen()


create usermodel.js :
--------------------

    const mongoose=require('mongoose');

    mongoose.connect(`mongodb://127.0.0.1:27017/mongopractice`)

    const userSchema = mongoose.Schema({
        name: String,
        username: String,
        email:String
    })

    module.exports=mongoose.model('user',userSchema)

app.js(CRUD)
------

->create:        -model-name.create({items,...})
->read-all:      -model-name.find()
->read only-one: -model-name.findOne({})
->update:        -model-name.findOneAndUpdate({})   
->delete:        -model-name.findOneAndDelete({id...})

    create:
    ------
        const userModel= require('./usermodel')

        app.get('/create', async(req,res)=>{
            let createduser= await userModel.create({
                name:'sai',
                email:'sai@gmail.com',
                username:'sai'
            })
            // console.log('create route hey')
            res.send(createduser)
        })

    update:
    -------
        //update
        app.get('/update', async(req,res)=>{
            let updatedUser=await userModel.findOneAndUpdate({username:'sai'},{name:'sai charan'},{new : true})
            // console.log('create route hey')
            res.send(updatedUser)
        })

    all-users:
    ----------

    //read-all
    app.get('/read',async(req,res)=>{
        let allusers=await userModel.find()
        res.send(allusers)
    })

    read only-one user:
    -------------------

    //read
    app.get('/read/name',async(req,res)=>{
        let allusers=await userModel.findOne({username:'charan'})
        res.send(allusers)
    })

    delete:
    -------
    
    //delete
    app.get('/delete',async(req,res)=>{
        let deletedUser=await userModel.findOneAndDelete({username:'charan'})
        res.send(deletedUser)
    }) 


May-5-2024:
----------
Authentication and Authorization:
---------------------------------
Authentication: user need to provide his/her credentials to log in to home page
Authorization: user need to be enrolled in the admin panel, so that if user need 
                to change any imporvisations in that page